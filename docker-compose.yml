services:
  user-service:
    build: ./user_service
    container_name: user-service
    ports:
      - "5001:5001"
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_started
    networks:
      - Qluster-network
    env_file:
      - .env
    volumes:
      - ./user_service:/app
      - /app/node_modules  # Prevents overwriting node_modules
    command: npm run dev  # Runs nodemon for hot-reloading
    restart: unless-stopped

  project-service:
    build: ./project_service
    container_name: project-service
    ports:
      - "5002:5002"
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_started
    networks:
      - Qluster-network
    env_file:
      - .env
    volumes:
      - ./project_service:/app
      - /app/node_modules  # Prevents overwriting node_modules
    command: npm run dev  # Runs nodemon for hot-reloading
    restart: unless-stopped

  kanban-service:
    build: ./kanban_service
    container_name: kanban-service
    ports:
      - "5003:5003"
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_started
    networks:
      - Qluster-network
    env_file:
      - .env
    volumes:
      - ./kanban_service:/app
      - /app/node_modules  # Prevents overwriting node_modules
    command: npm run dev  # Runs nodemon for hot-reloading
    restart: unless-stopped

  chat-bot-service:  # <-- Changed to lowercase for Docker compatibility
    build: ./chat_bot_service  # <-- Ensure the folder name matches the path
    container_name: chat-bot-service  # <-- Changed to lowercase
    ports:
      - "5005:5005"
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_started
    networks:
      - Qluster-network
    env_file:
      - .env
    volumes:
      - ./chat_bot_service:/app  # <-- Ensure the folder name matches
      - /app/node_modules  # Prevents overwriting node_modules
    command: npm run dev  # Runs nodemon for hot-reloading
    restart: unless-stopped

  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: "admin"
      RABBITMQ_DEFAULT_PASS: "password"
    networks:
      - Qluster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - "27017:27017"
    networks:
      - Qluster-network
    restart: unless-stopped
    volumes:
      - mongodb-data:/data/db

networks:
  Qluster-network:
    driver: bridge

volumes:
  mongodb-data:
    driver: local
